接口
code02  可选属性
code03  只读属性

code05  类类型接口 构造器接口
code06  复合接口
code07  接口继承类


重点：ts语法中冒号后面全是描述冒号前面的东西！！！！！！！！！！！！！！

接口中定义方法(函数)的两种形式：
01.fun(a:number,b:number):boolean;
  实例：fun(a:number,b:number){return false;}
02.fun:(a:number,b:number)=>boolean;
  实例：fun:(a:number,b:number)=>{return false;}


接口定义方法：
  interface A {
     (x:string,y:string,z:string):boolean;
   }
   let whj:A = function (q:string,b:string,z:string):boolean{
     return false;
   };


接口定义数组：
  interface Arr {
    [index:number]:string; //string代表数组中的每个元素都必须是字符串类型
  }
  let arr:Arr = ["a","b","c"];
  console.log(arr[1]);

接口定义只读数组：
  interface Arr {
    readonly [index:number]:string; //string代表数组中的每个元素都必须是字符串类型
  }
  let arr:Arr = ["a","b","c"];
  arr[1] = "123";//报错，不允许修改


接口定义对象：
  interface Obj {
    [index:string]:number; //number代表对象中的每个value都必须是数字类型
  }
  let obj:Obj = {age:12};
  console.log(obj["age"]);

接口定义只读对象：
  interface Obj {
    readonly [index:string]:number; //number代表对象中的每个value都必须是数字类型
  }
  let obj:Obj = {age:12};
  arr["age"] = 45;//报错，不允许修改

当然用接口定义对象的时候，index的类型就是key的类型，但是一般key的类型都用string和number
  interface ReadOnlyObj {
    readonly [index:number]:Person;
  }
  let obj:ReadOnlyObj = {
    1:new Person("Mike",12),
    2:new Person("Tom",11),
    3:new Person("John",22)
  };
  console.log(obj[2]);


构造器接口：
  interface ClockInterface{
    name:string;
    age:number;
    test():boolean;
  }
  interface ClockConstructor {
    new (hour:number,min:number):ClockInterface;
  }

  let a:ClockConstructor;
  let b:ClockInterface = new a(1,2);
  b.test = ()=>{
    return false;
  };
  b.age = 10;
  b.name = "xxx";
